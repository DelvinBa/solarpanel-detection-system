
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375
  IMAGE_NAME: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"


stages:
  #- lint          # ← will run first
  #- test          # ← will run second
  - build
  - deploy
  - pages

# # ---------------------------- #
# # 1. LINT
# # ---------------------------- #
# lint:
#   stage: lint
#   image: python:3.12-slim
#   cache:
#     key: ${CI_COMMIT_REF_SLUG}-pip
#     paths:
#       - .pip-cache
#   before_script:
#     - pip install --cache-dir $PIP_CACHE_DIR flake8
#   script:
#     - flake8 airflow/dags solarpanel_detection_service/src tests --max-line-length=120 || true

# # ---------------------------- #
# # 2. TEST (unit)
# # ---------------------------- #
# unit_test:
#   stage: test
#   image: python:${PYTHON_VERSION}-slim
#   cache:
#     key: ${CI_COMMIT_REF_SLUG}-pip
#     paths:
#       - .pip-cache
#   before_script:
#     # install your project + pytest
#     #  – if you already have a requirements.txt or pyproject.toml, use that instead
#     - pip install --cache-dir $PIP_CACHE_DIR -r requirements.txt || true
#     - pip install --cache-dir $PIP_CACHE_DIR pytest pytest-cov
#   script:
#     # run only unit tests; add --cov=. if you want coverage, or drop it for speed
#     - pytest tests/unit -q --cov=. --cov-report=term-missing
#   artifacts:
#     reports:
#       junit: junit.xml           # GitLab will show test results in MR UI
#     paths:
#       - htmlcov                  # coverage html (optional)
#   after_script:
#     # produce JUnit XML for GitLab test report (optional but helpful)
#     - pytest tests/unit -q --junitxml=junit.xml || true
#   coverage: '/^TOTAL.*\s+(\d+\%)$/'   # parses “TOTAL …  85%” from pytest‑cov output


# Build Docker image
build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: ""
    IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker-compose -f docker-compose.build.yml up
    # No need for docker tag command since we're using the correct image name in docker-compose.build.yml
  after_script:
    - docker logout $CI_REGISTRY


# Generate and publish project documentation
pages:
  stage: pages
  image: ghcr.io/quarto-dev/quarto-full:latest
  before_script:
    - tlmgr option repository https://mirror.ctan.org/systems/texlive/tlnet
    - tlmgr update --self --verify-repo=none
    - tlmgr install beamer caption soul koma-script --verify-repo=none
    - apt-get update && apt-get install -y librsvg2-bin
  script:
    - echo "Rendering Quarto documentation..."
    - quarto render . --output-dir public
  artifacts:
    paths:
      - public
  only:
    - main

deploy_to_ec2:
  stage: deploy
  script:
    - echo "Deploying to EC2..."
    - chmod 600 $EC2_DEPLOY_KEY
    - ssh -i $EC2_DEPLOY_KEY -o StrictHostKeyChecking=no ubuntu@3.88.102.215 "
      cd /home/ubuntu/02 &&
      git fetch origin &&
      git checkout main &&
      git reset --hard main &&
      sudo docker-compose down &&
      sudo docker-compose up -d --build "