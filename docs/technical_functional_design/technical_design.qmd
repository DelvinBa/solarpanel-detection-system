---
title: "Technical Design"
author:
  - Navid Gharapanjeh
  - Delvin Bacho
date: "2025-02-07"
toc: true
format:
    html: 
        code-fold: true
    pdf: 
        geometry: 
        - top=30mm
        - left=20mm
---


# 1. Introduction 
This project aims to leverage artificial intelligence (AI) to detect solar panels from satellite images, integrate the results with Kadasterâ€™s housing database. To ensure scalability, reproducibility, and efficiency, an end-to-end MLOps pipeline will be implemented. The following goals are structured to maintain clarity and alignment with project objectives.  

# 2. Constraints
- **Technical constraints**: Hardware, software, cloud providers.
- **Regulatory & Compliance**: GDPR, AI ethics, data security.
- **Operational constraints**: Budget, team skills, deadlines.

# 3. System Scope and Context
- **Scope**: Define what is included/excluded in the project.
- **Context Diagram**: Illustrate data sources, models, and outputs.

# 4. Solution Strategy
- **Data pipeline strategy**: Batch vs. real-time.
- **ML model strategy**: Pre-trained vs. custom models.
- **Deployment strategy**: On-premises, cloud, or edge.
- **Scaling strategy**: Horizontal vs. vertical scaling.

# 5. Building Block View
- **Components Overview**:
  - Data ingestion
  - Data preprocessing
  - Feature engineering
  - Model training
  - Model evaluation
  - Model deployment
- **Component Diagram**: Visualize these blocks and their interactions.

# 6. Runtime View
- **Data flow**: How data moves through the system.
- **Model serving process**: How predictions are generated and served.
- **Monitoring & logging**: Performance tracking and debugging.

# 7. Deployment View
- **Infrastructure choices**: Cloud services, local servers.
- **CI/CD pipeline for ML models**.
- **Containerization strategy**: Docker, Kubernetes.
- **Versioning & rollback mechanisms**.

# 8. Cross-cutting Concepts
- **Security & Access Control**.
- **Data Governance & Lineage**.
- **MLOps Best Practices**.
- **Bias & Fairness Considerations**.

# 9. Analytics Platform Documentation (Architecture Decisions)

## Overview  
In this project, we are building an **object detection pipeline** using **YOLOv8** to analyze satellite images of houses and detect solar panels. The pipeline is designed to be **scalable, automated, and efficient**, leveraging **Apache Airflow** for orchestration, **MinIO** as the storage backend, and **PostgreSQL** as the database. Since the focus is on model training and inference, **ETL/ELT and data cleaning are not yet included**, but these may be added in the future for data transformation and preprocessing.  

## Workflow Structure  
- **MinIO** acts as an **object storage system** to store raw images and model outputs.  
- **Apache Airflow** is used to **orchestrate** the workflow, triggering model training and inference jobs.  
- **YOLOv8** is the chosen object detection model for identifying solar panels on roofs.  
- **PostgreSQL** is the database for storing metadata, job statuses, and model performance metrics.  

Each of these components was carefully selected based on **scalability, ease of integration, and performance**. The table below provides a comparison of the chosen tools and their alternatives.  


### Selected Components and Alternatives Comparison

| **Component**       | **Chosen Tool**   | **Why Chosen?**                                                                                                                                                    | **Alternative(s)**        | **Why Not Chosen?**                                                                                                                                  |
|--------------------|-----------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------|
| **Storage**       | **MinIO**        | - S3-compatible API, making migration and integration easier  <br> - Lightweight and can be self-hosted on-premises or in the cloud  <br> - Scalable and performant for large datasets  <br> - Open-source and cost-effective compared to managed solutions | AWS S3, Azure Blob, GCS | - Managed cloud services can be expensive for large-scale storage  <br> - Vendor lock-in concerns  <br> - Less flexibility in self-hosted environments |
| **Orchestration** | **Apache Airflow** | - Industry-standard tool for workflow orchestration  <br> - Scalable, supports distributed execution  <br> - Large community and extensive plugin support  <br> - Integrates well with MinIO, Python, and ML pipelines | Prefect, Dagster, Kubeflow | - **Prefect** is easier to use but lacks some enterprise-level capabilities like complex DAGs  <br> - **Dagster** is great for data pipelines but less mature for ML workflows  <br> - **Kubeflow** is powerful but complex to set up and maintain |
| **Model Training** | **YOLOv8**       | - State-of-the-art real-time object detection  <br> - Pre-trained models available, reducing training time  <br> - Optimized for edge and cloud deployment  <br> - Faster inference compared to alternatives, making it suitable for real-time applications | Detectron2, MMDetection, EfficientDet | - **Detectron2** allows more customization but has a steeper learning curve  <br> - **MMDetection** is powerful but requires extensive configuration  <br> - **EfficientDet** provides better accuracy but is slower for real-time object detection |
| **Database** | **PostgreSQL** | - Perfect integration with Airflow (Airflow's native metadata DB)  <br> - PostGIS extension for geospatial data (crucial for property location analysis)  <br> - Strong data integrity with ACID compliance  <br> - Open-source with no licensing costs  <br> - JSON support for flexible schema when needed  <br> - Scalable for both logging and analytical queries | SQL Server, MongoDB, TimescaleDB | - **SQL Server** has licensing costs and higher resource requirements  <br> - **MongoDB** has weaker integration with Airflow and less mature spatial capabilities  <br> - **TimescaleDB** is specialized for time-series data which is only one aspect of our needs |

## Future Considerations
- **ETL/ELT Pipelines**: In the future, adding **data transformation and preprocessing** may be necessary.
- **Scalability Improvements**: If workload increases, consider **switching to cloud-based storage (AWS S3, GCS)**.
- **Automated Model Retraining**: Using **Airflow triggers or Kubeflow** for continuous learning.


# 10. Quality Requirements
- **Model Performance Metrics**.
- **Scalability & Maintainability**.
- **Explainability & Interpretability**.
- **Fault tolerance & disaster recovery**.

# 11. Risks and Technical Debt
- **Potential biases in data and models**.
- **Computational cost and resource constraints**.
- **Integration challenges with existing systems**.

# 12. Glossary
- Define key terms related to ML, AI, and MLOps.

---

