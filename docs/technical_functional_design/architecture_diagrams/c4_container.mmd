C4Container
title Container Diagram for Solar Panel Detection System

%% External systems
System_Ext(commondata, "CommonDataFactory", "")
System_Ext(kadaster, "Bag Viewer Kadaster", "")
Person(selin, "Selin", "NOWATT Product Owner")
System_Ext(pdok, "PDOK Luchtfoto WMS", "")
SystemDb_Ext(datastore, "Data Storage for Results", "External storage (CSV).")

%% External person

%% System boundary for Solar Panel Detection
Container_Boundary(spds, "Solar Panel Detection System") {
    
    Container(airflow, "Airflow", "Python", "Orchestrates and schedules pipeline tasks.")
    Container(pipeline, "Solardetection Service", "Python", "Data Collection, model training, and batch inference.")
    Container(fastapi, "FastAPI Gateway", "Python / FastAPI", "Forwards API requests to Application Logic")
    Container(mlflow, "MLflow", "Python", "Tracks ML experiments, metrics, and artifacts.")
    ContainerDb(postgres, "PostgreSQL", "Relational DB", "Stores ML-Flow data and detection results.")
    ContainerDb(minio, "MinIO", "Object Storage", "Storage for images, model artifacts andInfrence Results")
}

%% Relationships inside the boundary
Rel(airflow, pipeline, "Schedules training and batch inference tasks")
Rel(pipeline, minio, "Stores collected data, and inference Results", "S3/HTTP")
Rel(pipeline, mlflow, "Logs ML metrics and artifacts", "HTTP")

Rel(pipeline, datastore, "Exports final detection results (batch)", "CSV/Excel")
Rel(fastapi, pipeline, "Makes API calls to", "HTTP")
Rel(mlflow, postgres, "Stores experiment metadata", "SQL")
Rel(mlflow, minio, "Stores artifacts (e.g. models)", "S3/HTTP")

%% External interactions
Rel(pipeline, commondata, "Requests citycode, retrieves VIDs and PIDs", "REST")
Rel(pipeline, kadaster, "Requests VIDs, retrieves coordinates", "REST")
Rel(pipeline, pdok, "Requests coords, retrieves house images", "WebService (OGC)")
Rel(selin, fastapi, "Sends City ID or List of VIDs ", "REST")


%% Optional: Color the lines
UpdateRelStyle(airflow, pipeline, $lineColor="blue", $textColor="blue", $offsetX="-170", $offsetY="-100")
UpdateRelStyle(pipeline, minio, $lineColor="#a855f7", $textColor="#a855f7", $offsetX="20", $offsetY="0")
UpdateRelStyle(pipeline, mlflow, $lineColor="#a855f7", $textColor="#a855f7", $offsetX="-10", $offsetY="-10")
UpdateRelStyle(pipeline, postgres, $lineColor="#a855f7", $textColor="#a855f7", $offsetX="-130", $offsetY="0")
UpdateRelStyle(fastapi, pipeline, $lineColor="#15803d", $textColor="#15803d", $offsetX="-40", $offsetY="-110")
UpdateRelStyle(mlflow, minio, $lineColor="#f97316", $textColor="#f97316", $offsetX="100", $offsetY="60")
UpdateRelStyle(mlflow, postgres, $lineColor="#f97316", $textColor="#f97316", $offsetX="-60", $offsetY="45")



UpdateRelStyle(pipeline, datastore, $lineColor="#a855f7", $textColor="#a855f7", $offsetX="10", $offsetY="-50")
UpdateRelStyle(pipeline, commondata, $lineColor="#a855f7", $textColor="#a855f7", $offsetX="-200", $offsetY="-150")
UpdateRelStyle(pipeline, kadaster, $lineColor="#a855f7", $textColor="#a855f7", $offsetX="-100", $offsetY="-150")
UpdateRelStyle(pipeline, pdok, $lineColor="#a855f7", $textColor="#a855f7", $offsetX="-150", $offsetY="-50")
UpdateRelStyle(selin, fastapi, $lineColor="#ef4444", $textColor="#ef4444")

Rel(airflow, postgres, "Stores metadata", "SQL")
UpdateRelStyle(airflow, postgres, $lineColor="blue", $textColor="blue", $offsetX="-100", $offsetY="-40")


UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="1")
